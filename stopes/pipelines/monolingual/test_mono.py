# Copyright (c) Meta Platforms, Inc. and affiliates
# All rights reserved.
#
# This source code is licensed under the license found in the
# LICENSE file in the root directory of this source tree.

from stopes.pipelines.monolingual.monolingual_line_processor import SentenceSplitClean


def test_split_clean_eng():
    splitter = SentenceSplitClean("eng", split_algo="default")
    text = (
        "Moses : /moʊzɪz/ is considered the most important prophet in Judaism[3][4] and"
        " one of the most important prophets in Christianity, Islam, the Druze"
        " faith,[5][6] the Bahá’í Faith and other Abrahamic religions. According    to"
        " both the Bible and the Quran,[7] Moses was the leader of the Israelites and"
        " lawgiver to whom the authorship, or «acquisition from heaven», of the Torah"
        " (the first five books of the Bible) is attributed…"
    )
    results = list(splitter(text))
    sentences = [s for (h, s, c) in results]
    cleaned = [c for (h, s, c) in results]

    assert len(sentences) == 2
    assert len(cleaned) == len(sentences)
    assert cleaned == [
        "Moses: /moʊzɪz/ is considered the most important prophet in Judaism[3][4] and"
        " one of the most important prophets in Christianity, Islam, the Druze"
        " faith,[5][6] the Bahá'í Faith and other Abrahamic religions.",
        "According to both the Bible and the Quran,[7] Moses was the leader of the"
        ' Israelites and lawgiver to whom the authorship, or "acquisition from heaven,"'
        " of the Torah (the first five books of the Bible) is attributed...",
    ]


def test_split_clean_zho_Hans():
    splitter = SentenceSplitClean("zho", split_algo="default")
    text = (
        "热带风暴尚塔尔是2001年大西洋飓风季的一场在8月穿越了加勒比海的北大西洋热带气旋。尚塔尔于8月14"
        "日由热带大西洋的一股东风波发展而成，其存在的大部分时间里都在快速向西移动，退化成东风波后穿越了"
        "向风群岛。"
    )
    results = list(splitter(text))
    sentences = [s for (h, s, c) in results]
    cleaned = [c for (h, s, c) in results]

    assert len(sentences) == 2
    assert len(cleaned) == len(sentences)
    assert cleaned == [
        "热带风暴尚塔尔是2001年大西洋飓风季的一场在8月穿越了加勒比海的北大西洋热带气旋。",
        "尚塔尔于8月14日由热带大西洋的一股东风波发展而成,其存在的大部分时间里都在快速向西移动,退化成东风波后穿越了向风群岛。",
    ]


def test_split_clean_tha():
    splitter = SentenceSplitClean("tha", split_algo="default")
    text = (
        "พระราชบัญญัติธรรมนูญการปกครองแผ่นดินสยามชั่วคราว พุทธศักราช ๒๔๗๕ "
        "เป็นรัฐธรรมนูญฉบับชั่วคราว ซึ่งถือว่าเป็นรัฐธรรมนูญฉบับแรกแห่งราชอาณาจักรสยาม "
        "ประกาศใช้เมื่อวันที่ 27 มิถุนายน พ.ศ. 2475 "
        "โดยเป็นผลพวงหลังการปฏิวัติเมื่อวันที่ 24 มิถุนายน พ.ศ. 2475 โดยคณะราษฎร"
    )
    results = list(splitter(text))
    sentences = [s for (h, s, c) in results]
    cleaned = [c for (h, s, c) in results]

    assert len(sentences) == 3
    assert len(cleaned) == len(sentences)
    assert cleaned == [
        "พระราชบัญญัติธรรมนูญการปกครองแผ่นดินสยามชั่วคราว พุทธศักราช ๒๔๗๕"
        " เป็นรัฐธรรมนูญฉบับชั่วคราว",
        "ซึ่งถือว่าเป็นรัฐธรรมนูญฉบับแรกแห่งราชอาณาจักรสยาม",
        "ประกาศใช้เมื่อวันที่ 27 มิถุนายน พ.ศ. 2475"
        " โดยเป็นผลพวงหลังการปฏิวัติเมื่อวันที่ 24 มิถุนายน พ.ศ. 2475 โดยคณะราษฎร",
    ]


def test_split_clean_jpn():
    splitter = SentenceSplitClean("jpn", split_algo="default")
    text = (
        "初めて途上国を旅行する場合、または世界各国の初めての地域を旅行する場合、"
        "潜在的なカルチャーショックを過小評価してはいけません。 "
        "落ち着きのある有能な旅行者の多くは、途上国の旅行で経験する目新しさに圧倒され、"
        "文化的な差異を埋めるためにすばやく微調整を重ねていきます。 "
        "特に、最初の数日間は、慣れるために、欧風の高級なホテルや食事、"
        "サービスにお金をかけることを検討してみてはいかがでしょうか。 "
        "現地の動物相がわからない地域では、地面にマットレスやパッドを敷いて寝ないようにしましょう。 "
        "キャンプ生活をする場合は、蛇やサソリなどから身を守るために、キャンプ用の簡易ベッドやハンモックを用意しましょう。"
    )
    results = list(splitter(text))
    sentences = [s for (h, s, c) in results]
    cleaned = [c for (h, s, c) in results]
    assert len(sentences) == 5
    assert len(cleaned) == len(sentences)
    assert cleaned == [
        "初めて途上国を旅行する場合、または世界各国の初めての地域を旅行する場合、潜在的なカルチャーショックを過小評価してはいけません。",
        "落ち着きのある有能な旅行者の多くは、途上国の旅行で経験する目新しさに圧倒され、文化的な差異を埋めるためにすばやく微調整を重ねていきます。",
        "特に、最初の数日間は、慣れるために、欧風の高級なホテルや食事、サービスにお金をかけることを検討してみてはいかがでしょうか。",
        "現地の動物相がわからない地域では、地面にマットレスやパッドを敷いて寝ないようにしましょう。",
        "キャンプ生活をする場合は、蛇やサソリなどから身を守るために、キャンプ用の簡易ベッドやハンモックを用意しましょう。",
    ]


def test_split_clean_bod():
    splitter = SentenceSplitClean("bod", split_algo="default")
    text = (
        "གལ་ཏེ་ཡར་རྒྱས་འགྲོ་བཞིན་པའི་རྒྱལ་ཁབ་ཅིག་ནང་ཐེངས་དང་པོ་འགྲུལ་བཞུད་བྱེད་ཀྱི་ཡོད་ན། རིག་གཞུང་གི་རྦིར་སྒྲ་འདིའི་ནུས་པ་ཉམས་ཚོད་མ་ལེན། "
        "འགྲུལ་བཞུད་པ་རང་ཚུགས་བརྟན་པོ་དང་ནུས་ལྡན་མང་པོ་འཛམ་གླིང་ཡར་རྒྱས་འགྲོ་བཞིན་པའི་རྒྱལ་ཁབ་འགྲུལ་བཞུད་ཀྱི་གསར་ཐོན་དེ་དག་ལ་ཡིད་མགུ། "
        "གང་ལ་དེ་དག་གི་ཡུལ་སྲོལ་གོམས་གཤིས་སླ་བ་མང་པོ་མགྱོགས་པོ་སྙོམ་སྒྲིག་བྱེད་ཐུབ། ལྷག་པར་དུ་ཁྱེད་ཀྱི་ཐོག་མའི་འཚོ་བའི་ནང་། "
        "ནུབ་ཕྱོགས་ཀྱི་རྣམ་པ་ཡོད་པའི་སྤུས་ལེགས་ཀྱི་གསོལ་མགྲོན་ཁང་དང་། ཟས་རིགས།  ཞབས་ཞུ་བཅས་གོམས་འདྲིས་སུ་འཇགས་ཆེད་ངོས་འཛིན་བྱོས། "
        "ས་གནས་དེ་གའི་སྲོག་ཆགས་གནས་ཡུལ་རྒྱུས་མེད་ས་ཁུལ་དུ་ཉན་གདན་ནམ་ས་གདན་ཐོག་ཐང་དུ་ཉན་མི་ཉན། གལ་ཏེ་ཕྱི་ལ་སྒར་བརྒྱབ་ནས་བསྐྱོད་འཆར་ཡོད་ན། "
        "སྒུར་ནང་འཇོག་སྟབས་བདེའི་ཉལ་ཁྲི་དང་གནམ་དཔྱང་ཉལ་གདན་འཁུར་དགོས། དེས་ཁྱེད་རང་སྦྲུལ་དང་སྡིག་པ་ར་ཛ་ལ་སོགས་པ་ལས་སྐྱོབ་ཐུབ།"
    )
    results = list(splitter(text))
    sentences = [s for (h, s, c) in results]
    cleaned = [c for (h, s, c) in results]
    assert len(sentences) == 9
    assert len(cleaned) == len(sentences)
    assert cleaned == [
        "གལ་ཏེ་ཡར་རྒྱས་འགྲོ་བཞིན་པའི་རྒྱལ་ཁབ་ཅིག་ནང་ཐེངས་དང་པོ་འགྲུལ་བཞུད་བྱེད་ཀྱི་ཡོད་ན།",
        "རིག་གཞུང་གི་རྦིར་སྒྲ་འདིའི་ནུས་པ་ཉམས་ཚོད་མ་ལེན།",
        "འགྲུལ་བཞུད་པ་རང་ཚུགས་བརྟན་པོ་དང་ནུས་ལྡན་མང་པོ་འཛམ་གླིང་ཡར་རྒྱས་འགྲོ་བཞིན་པའི་རྒྱལ་ཁབ་འགྲུལ་བཞུད་ཀྱི་གསར་ཐོན་དེ་དག་ལ་ཡིད་མགུ།",
        "གང་ལ་དེ་དག་གི་ཡུལ་སྲོལ་གོམས་གཤིས་སླ་བ་མང་པོ་མགྱོགས་པོ་སྙོམ་སྒྲིག་བྱེད་ཐུབ།",
        "ལྷག་པར་དུ་ཁྱེད་ཀྱི་ཐོག་མའི་འཚོ་བའི་ནང་། ནུབ་ཕྱོགས་ཀྱི་རྣམ་པ་ཡོད་པའི་སྤུས་ལེགས་ཀྱི་གསོལ་མགྲོན་ཁང་དང་། ཟས་རིགས། ཞབས་ཞུ་བཅས་གོམས་འདྲིས་སུ་འཇགས་ཆེད་ངོས་འཛིན་བྱོས།",
        "ས་གནས་དེ་གའི་སྲོག་ཆགས་གནས་ཡུལ་རྒྱུས་མེད་ས་ཁུལ་དུ་ཉན་གདན་ནམ་ས་གདན་ཐོག་ཐང་དུ་ཉན་མི་ཉན།",
        "གལ་ཏེ་ཕྱི་ལ་སྒར་བརྒྱབ་ནས་བསྐྱོད་འཆར་ཡོད་ན།",
        "སྒུར་ནང་འཇོག་སྟབས་བདེའི་ཉལ་ཁྲི་དང་གནམ་དཔྱང་ཉལ་གདན་འཁུར་དགོས།",
        "དེས་ཁྱེད་རང་སྦྲུལ་དང་སྡིག་པ་ར་ཛ་ལ་སོགས་པ་ལས་སྐྱོབ་ཐུབ།",
    ]


def test_split_clean_urd():
    splitter = SentenceSplitClean("urd", split_algo="default")
    text = (
        "اگر کسی ترقی یافیہ ملک - یا دنیا کے کسی نئے گوشے میں پہلی"
        " دفعہ سفر کر رہے ہیں - تو ثقافت کی ممکنہ حیران کن تبدیلی کم نہ تصور "
        "کریں۔ بہت سے مستحکم، قابل مسافر ترقی یافتہ دنیا کے سفر کے"
        " نئے پن پر قابو پا چکے ہیں، جہاں کئی چھوٹی موٹی ثقافت کی"
        " مطابقت پذیری کی بھی ضرورت پڑسکتی ہے۔ بطور خاص اپنے ابتدائی دنوں"
        " میں عادت ڈالنے کے لئے مغربی طرز اور معیار کے ہوٹل، کھانے"
        " اور خدمات پر خوب دل کھول کر خرچ کریں۔ ان علاقوں میں زمین پر چٹائی یا"
        " گدے پر نہ سوئیں جہاں آپ کو مقامی جانوروں کے بارے میں علم نہيں ہے۔"
        " اگر آپ باہر کیمپ لگانے جارہے ہیں، تو آپ اپنے آپ کو سانپ، بچھو"
        " جیسی چیزوں سے دور رکھنے کے لئے کیمپ کی چارپائی یا جهولن کهٹول لائیں۔"
    )
    results = list(splitter(text))
    sentences = [s for (h, s, c) in results]
    cleaned = [c for (h, s, c) in results]
    assert len(sentences) == 6
    assert len(cleaned) == len(sentences)
    assert cleaned == [
        "اگر کسی ترقی یافیہ ملک - یا دنیا کے کسی نئے گوشے میں پہلی دفعہ سفر کر رہے ہیں",
        "- تو ثقافت کی ممکنہ حیران کن تبدیلی کم نہ تصور کریں۔",
        "بہت سے مستحکم، قابل مسافر ترقی یافتہ دنیا کے سفر کے نئے پن پر قابو پا چکے ہیں، جہاں کئی چھوٹی موٹی ثقافت کی مطابقت پذیری کی بھی ضرورت پڑسکتی ہے۔",
        "بطور خاص اپنے ابتدائی دنوں میں عادت ڈالنے کے لئے مغربی طرز اور معیار کے ہوٹل، کھانے اور خدمات پر خوب دل کھول کر خرچ کریں۔",
        "ان علاقوں میں زمین پر چٹائی یا گدے پر نہ سوئیں جہاں آپ کو مقامی جانوروں کے بارے میں علم نہيں ہے۔",
        "اگر آپ باہر کیمپ لگانے جارہے ہیں، تو آپ اپنے آپ کو سانپ، بچھو جیسی چیزوں سے دور رکھنے کے لئے کیمپ کی چارپائی یا جهولن کهٹول لائیں۔",
    ]


def test_split_clean_hye():
    splitter = SentenceSplitClean("hye", split_algo="default")
    text = (
        "Դոմինիկյան Հանրապետությունը (իսպաներեն` Ռեպուբլիկա Դոմինիկանա) Կարիբյան ավազանի երկիր է, "
        "որը զբաղեցնում է Հիսպանիոլա կղզու արևելյան մասը` կիսելով այն Հայիթիի հետ: "
        "Բացի սպիտակ ավազով լողափերից և լեռնային բնապատկերներից, "
        "երկրում է տեղակայված եվրոպական ամենահին քաղաքն Ամերիկայի տարածքներում՝ այժմ Սանտո Դոմինգոյի մասն է կազմում: "
        "Կղզին սկզբում բնակեցված էր տայիններով և կարիբներով: Կարիբները արավական լեզվով խոսող մարդիկ էին, "
        "ովքեր բնակվել էին այդտեղ Ք.ծ.հ. շուրջ 10 000 թ.-ին: Եվրոպացի հետազոտողների ժամանմանը հաջորդած "
        "մի քանի տարվա ընթացքում թաինոների բնակչությունը նշանակալիորեն կրճատվել է իսպանացի զավթիչների կողմից "
        "Ֆրեյ Բարտոլոմե դե Լաս Կասասի հիման վրա (Տրատադո դե Լաս Ինդիաս)՝ 1492 և 1498 թվականների ընթացքում "
        "իսպանացի զավթիչներն սպանել են շուրջ 100,000 տաինո:"
    )
    results = list(splitter(text))
    sentences = [s for (h, s, c) in results]
    cleaned = [c for (h, s, c) in results]
    assert len(sentences) == 6
    assert len(cleaned) == len(sentences)
    assert cleaned == [
        "Դոմինիկյան Հանրապետությունը (իսպաներեն' Ռեպուբլիկա Դոմինիկանա) Կարիբյան ավազանի երկիր է, որը զբաղեցնում է Հիսպանիոլա կղզու արեւելյան մասը' կիսելով այն Հայիթիի հետ:",
        "Բացի սպիտակ ավազով լողափերից եւ լեռնային բնապատկերներից, երկրում է տեղակայված եվրոպական ամենահին քաղաքն Ամերիկայի տարածքներում՝ այժմ Սանտո Դոմինգոյի մասն է կազմում:",
        "Կղզին սկզբում բնակեցված էր տայիններով եւ կարիբներով:",
        "Կարիբները արավական լեզվով խոսող մարդիկ էին, ովքեր բնակվել էին այդտեղ Ք.ծ.հ.",
        "շուրջ 10 000 թ.-ին:",
        "Եվրոպացի հետազոտողների ժամանմանը հաջորդած մի քանի տարվա ընթացքում թաինոների բնակչությունը նշանակալիորեն կրճատվել է իսպանացի զավթիչների կողմից Ֆրեյ Բարտոլոմե դե Լաս Կասասի հիման վրա (Տրատադո դե Լաս Ինդիաս) ՝ 1492 եւ 1498 թվականների ընթացքում իսպանացի զավթիչներն սպանել են շուրջ 100,000 տաինո:",
    ]


def test_split_clean_kat():
    splitter = SentenceSplitClean("kat", split_algo="default")
    text = (
        "კონკრეტული მძღოლებისა და მანქანების მოძრაობის ორ წერტილს შორს და მათი ერთმანეთთან ურთიერთობას შესწავლას "
        "ეწოდება სატრანსპორტო ნაკადი (Traffic Flow). სამწუხაროდ, ძალიან ძნელია სატრანსპორტო ნაკადის შესწავლა, "
        "რადგან მძღოლის ქცევის პროგნოზირება 100%-იანი სიზუსტით შეუძლებელია. მძღოლები გონივრული თანმიმდევრობის "
        "დიაპაზონში მოქმედებენ საბედნიეროდ; ამგვარად, ტრანსპორტის ნაკადებს ტენდენციურად აქვს გარკვეული გონივრული "
        "თანმიმდევრულობა და მათემატიკურად უხეშად შეიძლება იყოს წარმოდგენილი. ურთიერთკავშირების დადგენა მოხდა სამ "
        "ძირითად მახასიათებელს შორის ტრანსპორტის მოძრაობის უკეთ დასაგეგმად: (1) ნაკადი, (2) ინტენსივობა და (3) სიჩქარე. "
        "ეს ურთიერთკავშირები საავტომობილოგზის კეთილმოწყობის დაგეგმვას, პროექტირებასა და ექსპლუატაციას უწყობს ხელს."
    )
    results = list(splitter(text))
    sentences = [s for (h, s, c) in results]
    cleaned = [c for (h, s, c) in results]
    assert len(sentences) == 5
    assert len(cleaned) == len(sentences)
    assert cleaned == [
        "კონკრეტული მძღოლებისა და მანქანების მოძრაობის ორ წერტილს შორს და მათი ერთმანეთთან ურთიერთობას შესწავლას ეწოდება სატრანსპორტო ნაკადი (Traffic Flow).",
        "სამწუხაროდ, ძალიან ძნელია სატრანსპორტო ნაკადის შესწავლა, რადგან მძღოლის ქცევის პროგნოზირება 100%-იანი სიზუსტით შეუძლებელია.",
        "მძღოლები გონივრული თანმიმდევრობის დიაპაზონში მოქმედებენ საბედნიეროდ; ამგვარად, ტრანსპორტის ნაკადებს ტენდენციურად აქვს გარკვეული გონივრული თანმიმდევრულობა და მათემატიკურად უხეშად შეიძლება იყოს წარმოდგენილი.",
        "ურთიერთკავშირების დადგენა მოხდა სამ ძირითად მახასიათებელს შორის ტრანსპორტის მოძრაობის უკეთ დასაგეგმად: (1) ნაკადი, (2) ინტენსივობა და (3) სიჩქარე.",
        "ეს ურთიერთკავშირები საავტომობილოგზის კეთილმოწყობის დაგეგმვას, პროექტირებასა და ექსპლუატაციას უწყობს ხელს.",
    ]
