"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[349],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var i=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,i,l=function(e,t){if(null==e)return{};var n,i,l={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=i.createContext({}),u=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return i.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),d=u(n),m=l,g=d["".concat(s,".").concat(m)]||d[m]||c[m]||r;return n?i.createElement(g,o(o({ref:t},p),{},{components:n})):i.createElement(g,o({ref:t},p))}));function m(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,o=new Array(r);o[0]=d;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a.mdxType="string"==typeof e?e:l,o[1]=a;for(var u=2;u<r;u++)o[u]=n[u];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2936:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>a,toc:()=>u});var i=n(7462),l=(n(7294),n(3905));const r={sidebar_position:3},o="NLLB Monolingual Pipeline",a={unversionedId:"pipelines/monolingual",id:"pipelines/monolingual",title:"NLLB Monolingual Pipeline",description:'This is the monolingual "cleaning" pipeline, it does a few things:',source:"@site/docs/pipelines/monolingual.md",sourceDirName:"pipelines",slug:"/pipelines/monolingual",permalink:"/stopes/docs/pipelines/monolingual",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/pipelines/monolingual.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"quickstartSidebar",previous:{title:"Global Mining Pipeline",permalink:"/stopes/docs/pipelines/global_mining"},next:{title:"NLLB Distillation Pipeline",permalink:"/stopes/docs/pipelines/distillation"}},s={},u=[{value:"Run it",id:"run-it",level:2},{value:"Usefull overrides",id:"usefull-overrides",level:2},{value:"Outputs",id:"outputs",level:2},{value:"Logging",id:"logging",level:2}],p={toc:u};function c(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"nllb-monolingual-pipeline"},"NLLB Monolingual Pipeline"),(0,l.kt)("p",null,'This is the monolingual "cleaning" pipeline, it does a few things:'),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"split paragraphs in sentences"),(0,l.kt)("li",{parentName:"ol"},"run some moses normalization+cleaning on the sentences"),(0,l.kt)("li",{parentName:"ol"},"filter the sentences that do not match some criteria (length, character ratios, etc.)"),(0,l.kt)("li",{parentName:"ol"},"run script detection at the sentence level, if this doesn't match the expected lang, throw the sentence out"),(0,l.kt)("li",{parentName:"ol"},"run lid detection at the sentence level, if this doesn't match the expected lang, throw the sentence out"),(0,l.kt)("li",{parentName:"ol"},"deduplicate sentences (this is done by sorting sentences)")),(0,l.kt)("p",null,"The core filtering is in ",(0,l.kt)("inlineCode",{parentName:"p"},"monolingual_line_processor.py")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"utils/text_filter.py")),(0,l.kt)("h2",{id:"run-it"},"Run it"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"python monolingual_pipeline.py data_dir=yourdatahere langs='[umb,ssw]'")),(0,l.kt)("p",null,"should be enough to get it running."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"data_dir")," is where the raw data is, should have subfolders per lang and files named with the pattern corpus_name.lang.xz"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"langs")," an array of langs to process in this run")),(0,l.kt)("h2",{id:"usefull-overrides"},"Usefull overrides"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"launcher.cluster=local local_tmp_dir=/tmp/monolingual")," if you want to run this locally instead of on the slurm"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"preproces_requirements.cpus_per_task=40")," this is the number of CPUs used to process each lang file in a slurm job. Higher means it will go faster, but you'll have a harder time to get a machine from the queue"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"corpus_filter=yourcorpus")," filter the lang files you'll process to only work on a specific corpus"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"input_file_glob_template")," replace this if the files in your data_dir do not follow the expected template")),(0,l.kt)("p",null,"See ",(0,l.kt)("inlineCode",{parentName:"p"},"monolingual.yaml")," for more possible configurations."),(0,l.kt)("h2",{id:"outputs"},"Outputs"),(0,l.kt)("p",null,"The run will be started with a custom working directory that follows the pattern: ",(0,l.kt)("inlineCode",{parentName:"p"},"outputs/{date}/{start_time}"),", all the logs will go there (including executor_logs from slurm jobs). By default, the data output is set in ",(0,l.kt)("inlineCode",{parentName:"p"},"monolingual.yaml")," to be ",(0,l.kt)("inlineCode",{parentName:"p"},"output_dir: .")," this means that the outputs will go to lang dirs in the working directory and will go to different places depending on the day/time you start the run. This is useful for testing, but if you want to output somewhere else (like a central clean monolingual repo), override the ",(0,l.kt)("inlineCode",{parentName:"p"},"output_dir=/somethingstable/")," when starting the run."),(0,l.kt)("h2",{id:"logging"},"Logging"),(0,l.kt)("p",null,'the run will log to wandb monolingual dashboard. Go to wanddb and make sure to enable grouping. Choose to group by "group" and "lang". There will be one sub-run per process (see num_cpu above) per lang + a global run for the root script. The global run will have a funny name and will only report data at the end of everything. You can check progress in each subrun.'))}c.isMDXComponent=!0}}]);